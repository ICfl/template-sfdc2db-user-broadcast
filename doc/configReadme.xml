<?xml version="1.0"?>
<configuration>
	<placeholders>
		<placeholder id="template_name">Salesforce to Database User Broadcast</placeholder>
	</placeholders>
	<sections>
		<section id="use_case">
As a Salesforce admin I want to synchronize Users between Salesfoce and Database.

This Template should serve as a foundation for setting an online sync of Users from one SalesForce instance to database. Every time there is a new User or a change in an already existing one, the integration will poll for changes in SalesForce source instance and it will be responsible for updating the User on the target database table.

What about Passwords? When the User is updated in the target instance, the password is not changed and therefore there is nothing to concern about in this case. Password set in case of User creation is not being covered by this template considering that many different approaches can be selected.

Requirements have been set not only to be used as examples, but also to establish a starting point to adapt your integration to your requirements.

As implemented, this Template leverage the [Batch Module](http://www.mulesoft.org/documentation/display/current/Batch+Processing).

The batch job is divided in *Process* and *On Complete* stages.

The integration is triggered by a poll defined in the flow that is going to trigger the application, querying newest Salesforce updates/creations matching a filter criteria and executing the batch job.

During the *Process* stage, each Salesforce User will be filtered depending on, if it has an existing matching user in the Database.
The last step of the *Process* stage will group the users and insert/update them in Database.

Finally during the *On Complete* stage the Template will log output statistics data into the console.
		</section>
		<section id="considerations">
<![CDATA[
To make this Anypoint Template run, there are certain preconditions that must be considered. All of them deal with the preparations in both source and destination systems, that must be made in order for all to run smoothly. 
**Failing to do so could lead to unexpected behavior of the template.**
]]>
		</section>
		<section id="sfdc_src">
		<![CDATA[
1. **Users cannot be deleted in SalesForce:** For now, the only thing to do regarding users removal is disabling/deactivating them, but this won't make the username available for a new user.
2. **Each user needs to be associated to a Profile:** SalesForce's profiles are what define the permissions the user will have for manipulating data and other users. Each SalesForce account has its own profiles. In this kick you will find a processor labeled *assignProfileId and Username to the User* where to map your Profile Ids from the source account to the ones in the target account.
3. **Working with sandboxes for the same account**: Although each sandbox should be a completely different environment, Usernames cannot be repeated in different sandboxes, i.e. if you have a user with username *bob.dylan* in *sandbox A*, you will not be able to create another user with username *bob.dylan* in *sandbox B*. If you are indeed working with Sandboxes for the same SalesForce account you will need to map the source username to a different one in the target sandbox, for this purpose, please refer to the processor labeled *assign ProfileId and Username to the User*.
		]]>
		</section>
		<section id="db_dst">
		<![CDATA[
**Note:** This particular Anypoint Template illustrate the migration use case between Salesforce and a Database, thus it requires a Database instance to work.
The Anypoint Template comes packaged with a SQL script to create the DB table that uses.
It is the user responsibility to use that script to create the table in an available schema and change the configuration accordingly.
The SQL script file can be found in [src/main/resources/user.sql](../master/src/main/resources/user.sql)

This template is customized for MySQL. To use it with different SQL implementation, some changes are necessary:

* update SQL script dialect to desired one
* replace MySQL driver library dependency to desired one in [POM](pom.xml)
* update Database Config to suitable connection instead of db:my-sql-connection in global elements in [config.xml](../master/src/main/mule/config.xml)
* update database properties in `mule.*.properties` file
		]]>
		</section>
		<section id="running_on_standalone">
<![CDATA[
Once your app is all set and started, there is no need to do anything else. The application will poll Salesforce to know if there are any newly created or updated objects and synchronize them.
]]>
		</section>
		<section id="running_on_cloudhub">
<![CDATA[
Follow other steps defined [here](#runonpremise) and once your app is all set and started, there is no need to do anything else. Every time a User is created or modified, it will be automatically synchronized to supplied database table as long as it has an Email.
]]>
		</section>
		<section id="application_configuration">
		<![CDATA[
**Batch Aggregator configuration**
+ page.size `1000`

**Scheduler configuration**
+ scheduler.frequency `20000`
+ scheduler.start.delay `1000`

**Watermarking default last query timestamp**
+ watermark.default.expression `2016-12-13T03:00:59Z`
		
**Salesforce Connector configuration**
+ sfdc.username `bob.dylan@org`
+ sfdc.password `DylanPassword123`
+ sfdc.securityToken `avsfwCUl7apQs56Xq2AKi3X`

**Database Connector configuration**
+ db.host `localhost`
+ db.port `3306`
+ db.user `joan.baez`
+ db.password `JoanBaez456`
+ db.databasename `template-sfdc2db-user-broadcast`
]]>
		</section>
		<section id="api_calls">
		<![CDATA[
Salesforce imposes limits on the number of API Calls that can be made. Therefore calculating this amount may be an important factor to consider. User Broadcast Template calls to the API can be calculated using the formula:
***1 + X + X / ${page.size}***

Being ***X*** the number of Users to be synchronized on each run. 

The division by ***${page.size}*** is because by default, for each Upsert API Call, Users are gathered in groups of a number defined by the ${page.size}. Also consider that this calls are executed repeatedly every polling cycle.	

For instance if 10 records are fetched from origin instance, then 12 api calls will be made (1 + 10 + 1).
]]>
		</section>
		<section id="default_business_logic_xml">
		<![CDATA[
Functional aspect of the Template is implemented on this XML, directed by one flow that will poll for SalesForce creations/updates. 
For the purpose of this particular Anypoint Template the *mainFlow* just executes the Batch Job which handles all the logic of it.

The several message processors constitute four high level actions that fully implement the logic of this Template:
1. Firstly the Anypoint Template will go to the Salesforce and query all the existing users that match the filter criteria.
2. Then each Salesforce User will checked by email against database, if it has an existing matching user in database and then will group the users and insert/update them in Database.
3. Finally the Anypoint Template will log output statistics data into the console.
]]>
		</section>
		<section id="default_endpoints_xml">
		<![CDATA[
This is file is conformed by a Flow containing the Poll that will periodically query Salesforce for updated/created Users that meet the defined criteria in the query. And then executing the batch job process with the query results.
]]>
		</section>
	</sections>
</configuration>